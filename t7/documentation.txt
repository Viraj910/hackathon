===============================================================================
                    HOSPITAL MANAGEMENT SYSTEM - DOCUMENTATION
===============================================================================

Project Name: Hospital Management System
Version: 2.0.0 (MongoDB Integrated)
Date: June 28, 2025
Framework: Flask (Python)
Database: MongoDB
Frontend: HTML5, CSS3, JavaScript

===============================================================================
                                TABLE OF CONTENTS
===============================================================================

1. SYSTEM OVERVIEW
2. ARCHITECTURE
3. INSTALLATION & SETUP
4. USER ROLES & AUTHENTICATION
5. FEATURES & FUNCTIONALITY
6. DATABASE STRUCTURE
7. API ENDPOINTS
8. FILE STRUCTURE
9. CONFIGURATION
10. DEPLOYMENT
11. TROUBLESHOOTING
12. MAINTENANCE
13. SECURITY CONSIDERATIONS
14. FUTURE ENHANCEMENTS

===============================================================================
                              1. SYSTEM OVERVIEW
===============================================================================

The Hospital Management System is a web-based application designed to streamline
patient registration, appointment scheduling, and hospital administration. The
system supports multiple hospitals and provides role-based access control for
patients, doctors, and administrators.

KEY FEATURES:
- Multi-hospital support
- Patient registration with token assignment
- Real-time appointment scheduling
- Role-based dashboards (Patient, Doctor, Admin)
- Statistics and reporting
- Data export capabilities
- Responsive web interface
- MongoDB integration for scalable data storage

TECHNOLOGY STACK:
- Backend: Python Flask Framework
- Database: MongoDB with PyMongo driver
- Frontend: HTML5, CSS3, Vanilla JavaScript
- Authentication: Session-based with role verification
- Environment: Python dotenv for configuration

===============================================================================
                                2. ARCHITECTURE
===============================================================================

SYSTEM ARCHITECTURE:
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Web Browser   │───▶│   Flask App     │───▶│    MongoDB      │
│   (Frontend)    │    │   (Backend)     │    │   (Database)    │
└─────────────────┘    └─────────────────┘    └─────────────────┘
                              │
                              ▼
                       ┌─────────────────┐
                       │  Static Files   │
                       │ (CSS/JS/Images) │
                       └─────────────────┘

APPLICATION LAYERS:
1. Presentation Layer: HTML templates with CSS styling and JavaScript
2. Application Layer: Flask routes and business logic
3. Data Access Layer: MongoDB operations via DatabaseManager class
4. Database Layer: MongoDB collections for data persistence

DESIGN PATTERNS:
- MVC (Model-View-Controller) pattern
- Singleton pattern for database connection
- Decorator pattern for authentication
- Factory pattern for user creation

===============================================================================
                            3. INSTALLATION & SETUP
===============================================================================

PREREQUISITES:
- Python 3.8 or higher
- MongoDB 4.4 or higher
- pip (Python package manager)

INSTALLATION STEPS:

1. CLONE/DOWNLOAD PROJECT:
   - Extract project files to desired directory
   - Navigate to project root: c:\Users\viraj\OneDrive\Desktop\t6

2. INSTALL PYTHON DEPENDENCIES:
   pip install -r requirements.txt

   Required packages:
   - Flask==2.3.0
   - pymongo==4.3.3
   - python-dotenv==1.0.0

3. SETUP MONGODB:
   - Install MongoDB Community Server
   - Start MongoDB service
   - Create database: 'hospital_management'
   - Default connection: mongodb://localhost:27017/

4. ENVIRONMENT CONFIGURATION:
   Create .env file with following variables:
   MONGODB_URI=mongodb://localhost:27017/
   DATABASE_NAME=hospital_management
   SECRET_KEY=your-secret-key-change-this-in-production

5. INITIALIZE DATABASE:
   python app.py
   (Automatically creates collections and default data)

6. ACCESS APPLICATION:
   - URL: http://127.0.0.1:5000
   - Default Port: 5000

===============================================================================
                          4. USER ROLES & AUTHENTICATION
===============================================================================

USER ROLES:

1. PATIENT:
   - Access: Hospital selection and registration form
   - Features: Select hospital, fill registration form, receive token
   - Authentication: Session-based (no username/password required)

2. DOCTOR:
   - Access: Doctor dashboard, patient management, reports
   - Features: View assigned hospital patients, export data, statistics
   - Authentication: Username/password login
   - Hospital Assignment: Restricted to assigned hospital data

3. ADMIN:
   - Access: Full system access
   - Features: All hospital data, user management, system settings
   - Authentication: Username/password login
   - Privileges: System-wide access and control

DEFAULT CREDENTIALS:

Doctors:
- Username: dr_smith | Password: doctor123
- Username: dr_johnson | Password: medical456
- Username: dr_brown | Password: doctor789
- Username: dr_davis | Password: doctor456

Admins:
- Username: admin | Password: admin123
- Username: superadmin | Password: super456
- Username: hospital_admin | Password: hospital789

AUTHENTICATION FLOW:
1. User selects role (Patient/Doctor/Admin)
2. For patients: Direct hospital selection
3. For doctors/admins: Login form with credentials
4. Session creation with role and permissions
5. Role-based route protection via @require_login decorator

===============================================================================
                            5. FEATURES & FUNCTIONALITY
===============================================================================

PATIENT FEATURES:
├── Hospital Selection
│   ├── Browse available hospitals
│   ├── View hospital information and doctors
│   ├── Search hospitals by name/specialty
│   └── Automatic redirect to registration form
├── Patient Registration
│   ├── Personal information form
│   ├── Medical history and symptoms
│   ├── Emergency contact details
│   ├── Automatic token assignment
│   └── Appointment slot allocation
└── Registration Confirmation
    ├── Display assigned token number
    ├── Show appointment time slot
    ├── Estimated wait time
    └── Hospital contact information

DOCTOR FEATURES:
├── Doctor Dashboard
│   ├── Hospital assignment display
│   ├── Patient statistics for assigned hospital
│   ├── Today's patient count
│   └── Recent patient list
├── Patient Management
│   ├── View all patients from assigned hospital
│   ├── Search and filter patients
│   ├── Detailed patient information
│   └── Patient statistics
├── Reports & Analytics
│   ├── Patient demographics
│   ├── Age group analysis
│   ├── Gender distribution
│   └── Monthly trends
└── Data Export
    ├── CSV export (basic patient data)
    ├── Filtered exports
    └── Hospital-specific data

ADMIN FEATURES:
├── Admin Dashboard
│   ├── System-wide statistics
│   ├── All hospitals overview
│   ├── User management summary
│   └── Recent activity monitoring
├── Patient Management
│   ├── All hospital patient data
│   ├── Advanced filtering options
│   ├── Patient record management
│   └── Bulk operations
├── User Management
│   ├── Doctor account management
│   ├── Admin account management
│   ├── User status control
│   └── Role assignment
├── Hospital Management
│   ├── Hospital configuration
│   ├── Doctor-hospital assignments
│   ├── Hospital statistics
│   └── Service management
├── System Administration
│   ├── Database management
│   ├── System configuration
│   ├── Data backup/restore
│   └── Performance monitoring
├── Reports & Analytics
│   ├── Comprehensive system reports
│   ├── Cross-hospital analytics
│   ├── User activity reports
│   └── Performance metrics
└── Data Export
    ├── Full system data export
    ├── Multi-format exports
    ├── Scheduled exports
    └── Custom report generation

TOKEN & APPOINTMENT SYSTEM:
├── Automatic Token Generation
│   ├── Hospital-specific numbering
│   ├── Date-based reset
│   ├── Sequential assignment
│   └── Collision prevention
├── Time Slot Management
│   ├── 13 daily time slots (7:30 AM - 8:30 PM)
│   ├── 60 patients per slot capacity
│   ├── Automatic slot assignment
│   └── Wait time estimation
└── Queue Management
    ├── Token-based patient queue
    ├── Slot-based organization
    ├── Real-time status tracking
    └── Estimated service time

===============================================================================
                              6. DATABASE STRUCTURE
===============================================================================

MONGODB COLLECTIONS:

1. PATIENTS COLLECTION:
   {
     "_id": ObjectId,
     "firstName": String,
     "lastName": String,
     "age": Number,
     "gender": String,
     "phone": String,
     "address": String,
     "selected_hospital": String,
     "symptoms": String,
     "allergies": String,
     "medications": String,
     "medicalHistory": String,
     "emergencyName": String,
     "emergencyPhone": String,
     "emergencyRelation": String,
     "token_number": Number,
     "slot_number": Number,
     "time_range": String,
     "estimated_wait_time": String,
     "timestamp": String,
     "created_at": DateTime
   }

2. DOCTORS COLLECTION:
   {
     "_id": ObjectId,
     "username": String (unique),
     "password": String,
     "role": "doctor",
     "display_name": String,
     "department": String,
     "assigned_hospital": String,
     "status": String,
     "created_at": DateTime,
     "last_login": DateTime
   }

3. ADMINS COLLECTION:
   {
     "_id": ObjectId,
     "username": String (unique),
     "password": String,
     "role": "admin",
     "display_name": String,
     "status": String,
     "created_at": DateTime,
     "last_login": DateTime
   }

4. HOSPITALS COLLECTION:
   {
     "_id": ObjectId,
     "hospital_id": String (unique),
     "name": String,
     "description": String,
     "status": String,
     "created_at": DateTime
   }

5. SYSTEM_CONFIG COLLECTION:
   {
     "_id": ObjectId,
     "config_key": String (unique),
     "config_value": Mixed,
     "updated_at": DateTime
   }

6. ADMIN_LOGS COLLECTION:
   {
     "_id": ObjectId,
     "action": String,
     "user_id": String,
     "details": Object,
     "logged_at": DateTime
   }

DATABASE INDEXES:
- patients.selected_hospital
- patients.timestamp
- patients.token_number
- patients.slot_number
- patients.firstName + lastName (compound)
- doctors.username (unique)
- admins.username (unique)
- hospitals.hospital_id (unique)
- system_config.config_key (unique)

===============================================================================
                                7. API ENDPOINTS
===============================================================================

PUBLIC ROUTES:
GET  /                          - Homepage
GET  /login-choice             - Login role selection
GET  /patient/login            - Patient login (redirects to hospital selection)
GET  /patient/hospital-selection - Hospital selection page
POST /patient/hospital-selection - Process hospital selection
GET  /patient/form             - Patient registration form
POST /patient/form             - Submit patient registration
GET  /legacy                   - Legacy form (for comparison)
POST /legacy                   - Submit legacy form

DOCTOR ROUTES (Authentication Required):
GET  /doctor/login             - Doctor login page
POST /doctor/login             - Process doctor login
GET  /doctor/dashboard         - Doctor dashboard
GET  /doctor/patients          - Patient management
GET  /doctor/reports           - Reports and analytics
GET  /doctor/settings          - Doctor settings
GET  /doctor/patient/<id>      - Patient detail view
GET  /doctor/export/csv        - Export patient data (CSV)

ADMIN ROUTES (Authentication Required):
GET  /admin/login              - Admin login page
POST /admin/login              - Process admin login
GET  /admin/dashboard          - Admin dashboard
GET  /admin/patients           - Patient management (admin view)
GET  /admin/doctors            - Doctor management
GET  /admin/users              - User management
GET  /admin/system             - System settings
GET  /admin/reports            - Admin reports
GET  /admin/tokens             - Token status overview
GET  /admin/export/csv         - Export all patient data
GET  /admin/export/filtered-csv - Export filtered data
GET  /admin/export/doctors-csv - Export doctors data
GET  /admin/export/users-csv   - Export all users data
POST /admin/clear-data         - Clear system data
POST /admin/clear-cache        - Clear system cache

SHARED ROUTES:
GET  /view_submissions         - View submissions (doctor/admin)
GET  /logout                   - Logout user
GET  /favicon.ico              - Favicon

AJAX/API ENDPOINTS:
- Form validation endpoints
- Real-time data updates
- Search functionality
- Dynamic content loading

===============================================================================
                                8. FILE STRUCTURE
===============================================================================

PROJECT ROOT: c:\Users\viraj\OneDrive\Desktop\t6\
│
├── app.py                     - Main Flask application
├── database.py                - MongoDB database manager
├── requirements.txt           - Python dependencies
├── .env                       - Environment configuration
├── README.md                  - Project documentation
├── documentation.txt          - This documentation file
│
├── static/                    - Static web assets
│   ├── css/
│   │   └── styles.css         - Main stylesheet
│   ├── js/
│   │   ├── ai_voice.js        - Voice interaction functionality
│   │   └── voice.js           - Voice utilities
│   ├── favicon.ico            - Browser favicon (ICO)
│   └── favicon.svg            - Browser favicon (SVG)
│
└── templates/                 - HTML templates
    ├── homepage.html          - Main homepage
    ├── login_choice.html      - Role selection page
    ├── hospital_selection.html - Hospital selection
    ├── ai_form.html           - Patient registration form
    ├── ai_success.html        - Registration success page
    ├── doctor_login.html      - Doctor login form
    ├── doctor_dashboard.html  - Doctor dashboard
    ├── admin_login.html       - Admin login form
    ├── admin_dashboard.html   - Admin dashboard
    ├── admin.html             - Submissions view
    ├── patient_management.html - Patient management
    ├── reports.html           - Reports page
    ├── patient_detail.html    - Patient details
    ├── admin_doctors.html     - Doctor management
    ├── admin_users.html       - User management
    ├── admin_system.html      - System settings
    ├── admin_reports.html     - Admin reports
    ├── token_status.html      - Token status overview
    ├── settings.html          - Settings page
    ├── form.html              - Legacy form
    └── success.html           - Legacy success page

CODE ORGANIZATION:

app.py STRUCTURE:
├── Imports and Configuration
├── Database Helper Functions
├── Authentication Decorators
├── Public Routes (/, /login-choice, etc.)
├── Patient Routes (/patient/*)
├── Doctor Routes (/doctor/*)
├── Admin Routes (/admin/*)
├── Utility Functions
└── Application Startup

database.py STRUCTURE:
├── DatabaseManager Class
├── Connection Management
├── User Management Methods
├── Hospital Management Methods
├── Patient Management Methods
├── Statistics and Analytics
├── Configuration Management
└── Utility Functions

===============================================================================
                              9. CONFIGURATION
===============================================================================

ENVIRONMENT VARIABLES (.env):
MONGODB_URI=mongodb://localhost:27017/
DATABASE_NAME=hospital_management
SECRET_KEY=your-secret-key-change-this-in-production

FLASK CONFIGURATION:
- Debug Mode: False (production), True (development)
- Secret Key: From environment variable
- Session Management: Flask-Session
- Template Folder: templates/
- Static Folder: static/

MONGODB CONFIGURATION:
- Connection Pool: Default PyMongo settings
- Timeout: 30 seconds
- Index Creation: Automatic on startup
- Connection String: Configurable via environment

DEFAULT HOSPITALS:
1. City General Hospital - Emergency & Trauma Center
2. Central Medical Center - Comprehensive Healthcare Services
3. Specialized Cardiac Care - Heart & Cardiovascular Treatment
4. Women's Health Clinic - Gynecology & Maternity Care
5. Pediatric Medical Center - Children's Healthcare & Family Medicine

TIME SLOTS CONFIGURATION:
- Start Time: 7:30 AM
- End Time: 8:30 PM
- Slot Duration: 1 hour
- Total Slots: 13 per day
- Capacity: 60 patients per slot
- Wait Time: 5 minutes per patient (estimated)

TOKEN NUMBERING:
- Hospital-specific numbering
- Daily reset
- Sequential assignment
- Auto-increment per hospital

===============================================================================
                                10. DEPLOYMENT
===============================================================================

DEVELOPMENT DEPLOYMENT:
1. Install dependencies: pip install -r requirements.txt
2. Setup MongoDB and start service
3. Configure .env file
4. Run application: python app.py
5. Access: http://127.0.0.1:5000

PRODUCTION DEPLOYMENT:

1. SERVER REQUIREMENTS:
   - Linux/Windows Server
   - Python 3.8+
   - MongoDB 4.4+
   - Web Server (Nginx/Apache)
   - WSGI Server (Gunicorn/uWSGI)

2. DEPLOYMENT STEPS:
   - Setup production server
   - Install Python and MongoDB
   - Deploy application files
   - Configure environment variables
   - Setup reverse proxy (Nginx)
   - Configure SSL certificates
   - Setup process manager (systemd/supervisor)
   - Configure monitoring

3. SECURITY CONSIDERATIONS:
   - Change default passwords
   - Use strong secret keys
   - Enable MongoDB authentication
   - Configure firewall rules
   - Setup SSL/TLS encryption
   - Regular security updates
   - Database backup strategy

4. PERFORMANCE OPTIMIZATION:
   - MongoDB indexing
   - Connection pooling
   - Static file caching
   - Gzip compression
   - CDN for static assets
   - Load balancing (if needed)

5. MONITORING:
   - Application logs
   - Database performance
   - System resources
   - Error tracking
   - Uptime monitoring

===============================================================================
                              11. TROUBLESHOOTING
===============================================================================

COMMON ISSUES:

1. DATABASE CONNECTION ERRORS:
   Problem: "MongoDB connection failed"
   Solution:
   - Check MongoDB service is running
   - Verify connection string in .env
   - Check network connectivity
   - Verify database permissions

2. AUTHENTICATION FAILURES:
   Problem: "Invalid username or password"
   Solution:
   - Verify credentials against default list
   - Check user status in database
   - Ensure proper role assignment
   - Clear browser cache/sessions

3. PATIENT REGISTRATION ISSUES:
   Problem: "Failed to save patient data"
   Solution:
   - Check database connectivity
   - Verify MongoDB write permissions
   - Check form data validation
   - Review server logs for errors

4. TOKEN ASSIGNMENT PROBLEMS:
   Problem: "Duplicate token numbers"
   Solution:
   - Check token numbering logic
   - Verify date-based reset
   - Review hospital filtering
   - Check database indexes

5. TEMPLATE RENDERING ERRORS:
   Problem: "Template not found"
   Solution:
   - Verify template file paths
   - Check Flask template folder configuration
   - Ensure file permissions
   - Review route definitions

6. STATIC FILE LOADING ISSUES:
   Problem: "CSS/JS files not loading"
   Solution:
   - Check static folder configuration
   - Verify file paths in templates
   - Clear browser cache
   - Check web server configuration

DEBUGGING STEPS:
1. Check application logs
2. Enable Flask debug mode (development only)
3. Verify MongoDB logs
4. Test database connectivity
5. Review browser console for errors
6. Check network connectivity
7. Verify file permissions
8. Test with minimal configuration

LOG FILES:
- Flask application logs: stdout/stderr
- MongoDB logs: /var/log/mongodb/
- Web server logs: /var/log/nginx/ or /var/log/apache2/
- System logs: /var/log/syslog

===============================================================================
                                12. MAINTENANCE
===============================================================================

REGULAR MAINTENANCE TASKS:

DAILY:
- Monitor system performance
- Check error logs
- Verify backup completion
- Monitor disk space usage

WEEKLY:
- Review application logs
- Check database performance
- Update system packages
- Review security alerts

MONTHLY:
- Database optimization
- Index analysis and rebuilding
- Performance analysis
- Security audit
- Backup verification

QUARTERLY:
- Major dependency updates
- Security patches
- Performance optimization
- Capacity planning
- Disaster recovery testing

DATABASE MAINTENANCE:
- Regular backups (automated)
- Index optimization
- Collection statistics monitoring
- Query performance analysis
- Data archival (if needed)

BACKUP STRATEGY:
- Daily automated backups
- Weekly full system backups
- Monthly offsite backups
- Point-in-time recovery capability
- Backup verification testing

UPDATE PROCEDURES:
1. Test updates in development environment
2. Schedule maintenance window
3. Create system backup
4. Apply updates
5. Verify functionality
6. Monitor for issues
7. Rollback if necessary

===============================================================================
                           13. SECURITY CONSIDERATIONS
===============================================================================

AUTHENTICATION & AUTHORIZATION:
- Session-based authentication
- Role-based access control
- Password protection for admin/doctor accounts
- Session timeout management
- CSRF protection (recommended)

DATA SECURITY:
- Input validation and sanitization
- SQL injection prevention (NoSQL injection for MongoDB)
- XSS protection
- Secure file uploads (if implemented)
- Data encryption (recommended for production)

NETWORK SECURITY:
- HTTPS/SSL encryption (production)
- Firewall configuration
- Port restrictions
- VPN access (if needed)
- Network monitoring

APPLICATION SECURITY:
- Secret key management
- Environment variable protection
- Error message sanitization
- Debug mode disabled (production)
- Security headers

DATABASE SECURITY:
- MongoDB authentication
- Database user permissions
- Connection encryption
- Access logging
- Regular security updates

SECURITY BEST PRACTICES:
1. Change all default passwords
2. Use strong secret keys
3. Enable MongoDB authentication
4. Implement HTTPS in production
5. Regular security updates
6. Monitor access logs
7. Implement rate limiting
8. Use secure session configuration
9. Validate all user inputs
10. Regular security audits

VULNERABILITY MANAGEMENT:
- Regular dependency updates
- Security scanning
- Penetration testing
- Code review
- Incident response plan

===============================================================================
                            14. FUTURE ENHANCEMENTS
===============================================================================

PLANNED FEATURES:

SHORT TERM (1-3 months):
- Email notifications for appointments
- SMS integration for token updates
- Advanced search and filtering
- Patient portal for self-service
- Mobile responsive design improvements
- API endpoints for mobile app
- Real-time dashboard updates
- Export to multiple formats (PDF, Excel)

MEDIUM TERM (3-6 months):
- Integration with hospital management systems
- Telemedicine consultation scheduling
- Payment gateway integration
- Advanced reporting and analytics
- Machine learning for appointment optimization
- Multi-language support
- Advanced user management
- Audit trail and compliance features

LONG TERM (6+ months):
- Mobile application (iOS/Android)
- Integration with electronic health records
- AI-powered symptom analysis
- Predictive analytics for resource planning
- IoT device integration
- Blockchain for secure health records
- Advanced security features
- Microservices architecture migration

TECHNICAL IMPROVEMENTS:
- Database query optimization
- Caching implementation (Redis)
- Load balancing and scaling
- Container deployment (Docker)
- CI/CD pipeline setup
- Automated testing suite
- Performance monitoring
- Error tracking system

INTEGRATION POSSIBILITIES:
- Hospital Information Systems (HIS)
- Electronic Health Records (EHR)
- Laboratory Information Systems (LIS)
- Radiology Information Systems (RIS)
- Pharmacy Management Systems
- Insurance verification systems
- Government health databases
- Telemedicine platforms

SCALABILITY ENHANCEMENTS:
- Database sharding
- Horizontal scaling
- CDN integration
- Microservices architecture
- Message queue implementation
- Event-driven architecture
- Cloud deployment options
- Global distribution

===============================================================================
                              CONTACT & SUPPORT
===============================================================================

For technical support, bug reports, or feature requests:

Project Repository: [Add repository URL if available]
Documentation: This file (documentation.txt)
Issue Tracking: [Add issue tracker URL if available]

Development Team:
- System Architecture: [Developer Name]
- Database Design: [Developer Name]
- Frontend Development: [Developer Name]
- Quality Assurance: [Developer Name]

Last Updated: June 28, 2025
Version: 2.0.0 (MongoDB Integrated)

===============================================================================
                                END OF DOCUMENTATION
===============================================================================
